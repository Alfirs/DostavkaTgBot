import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∫—É—Ö–Ω–∏
ADMIN_ID = 5333876903
KITCHEN_ID = 5333876903

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçî –ú–µ–Ω—é"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏
menu_items = {
    "–°—É—à–∏": {
        "–°—É—à–∏ —Å –ª–æ—Å–æ—Å–µ–º": {"price": 600, "description": "–°–≤–µ–∂–∏–π –ª–æ—Å–æ—Å—å, —Ä–∏—Å, –Ω–æ—Ä–∏.", "photo": "images/sushi_salmon.jpg"},
        "–°—É—à–∏ —Å —Ç—É–Ω—Ü–æ–º": {"price": 650, "description": "–ù–µ–∂–Ω—ã–π —Ç—É–Ω–µ—Ü —Å –æ—Å—Ç—Ä–∏–Ω–∫–æ–π.", "photo": "images/sushi_tuna.jpg"}
    },
    "–ë—É—Ä–≥–µ—Ä—ã": {
        "–ë—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π": {"price": 350, "description": "–°–æ—á–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞, –æ–≤–æ—â–∏, —Å–æ—É—Å.", "photo": "images/beef_burger.jpg"},
        "–ë—É—Ä–≥–µ—Ä —Å –∫—É—Ä–∏—Ü–µ–π": {"price": 320, "description": "–•—Ä—É—Å—Ç—è—â–∞—è –∫—É—Ä–∏—Ü–∞ –∏ –º–∞–π–æ–Ω–µ–∑.", "photo": "images/chicken_burger.jpg"},
        "–§–∏—Ä–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ –¥–æ–ª—å–∫–∏": {"price": 250, "description": "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–µ –¥–æ–ª—å–∫–∏ —Å–æ —Å–ø–µ—Ü–∏—è–º–∏.", "photo": "images/potato_wedges.jpg"}
    },
    "–ü–∏—Ü—Ü–∞": {
        "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": {"price": 450, "description": "–¢–æ–º–∞—Ç—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫.", "photo": "images/margherita.jpg"},
        "–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": {"price": 500, "description": "–û—Å—Ç—Ä–∞—è –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä.", "photo": "images/pepperoni.jpg"}
    },
    "–•–æ–ª–æ–¥–Ω—ã–µ –±–ª—é–¥–∞": {
        "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç": {"price": 350, "description": "–û–ª–∏–≤–∫–∏, —Ñ–µ—Ç–∞, –æ–≥—É—Ä—Ü—ã.", "photo": "images/greek_salad.jpg"},
        "–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π": {"price": 400, "description": "–ö—É—Ä–∏—Ü–∞, —Å—É—Ö–∞—Ä–∏–∫–∏, –ø–∞—Ä–º–µ–∑–∞–Ω.", "photo": "images/caesar.jpg"}
    },
    "–ù–∞–ø–∏—Ç–∫–∏": {
        "–ù–∞–ø–∏—Ç–æ–∫ Coca-Cola 0.5–ª": {"price": 150, "description": "–û—Å–≤–µ–∂–∞—é—â–∞—è –∫–æ–ª–∞.", "photo": "images/coca_cola.jpg"}
    }
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
ITEMS_PER_PAGE = 3
user_carts = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ JSON
def load_orders():
    try:
        with open("orders.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_orders(orders_dict):
    with open("orders.json", "w") as f:
        json.dump(orders_dict, f)

orders = load_orders()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class Order(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    confirm_data = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
class EditOrder(StatesGroup):
    select_field = State()
    edit_name = State()
    edit_phone = State()
    edit_address = State()
    edit_cart = State()
    confirm_edit = State()

# –†–∞–±–æ—Ç–∞ —Å Google Sheets
def get_google_sheet():
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name('google_credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open('FoodDeliveryCustomers').sheet1
        return sheet
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        return None

def find_order_in_sheet(phone):
    sheet = get_google_sheet()
    if not sheet:
        return None
    all_records = sheet.get_all_values()
    for i, row in enumerate(all_records, start=1):
        if len(row) > 1 and row[1] == phone:
            return i
    return None

async def update_or_add_order_to_sheet(order_data):
    try:
        sheet = get_google_sheet()
        if not sheet:
            await bot.send_message(ADMIN_ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets!")
            return
        phone = order_data[1]
        row_index = find_order_in_sheet(phone)
        if row_index:
            sheet.update(f"A{row_index}:E{row_index}", [order_data])
            print(f"–ó–∞–∫–∞–∑ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets!")
        else:
            sheet.append_row(order_data)
            print(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets!")
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã
def calculate_total_price(cart):
    return sum(menu_items[cat][item]["price"] for cat in menu_items for item in cart if item in menu_items[cat])

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∫—É—Ö–Ω–∏
async def notify_admin(order_data, phone, username):
    try:
        message = (
            f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            f"üë§ –ò–º—è: {order_data[0]}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data[1]}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order_data[2]}\n"
            f"üõí –ó–∞–∫–∞–∑: {order_data[3]}\n"
            f"üí∞ –°—É–º–º–∞: {order_data[4]}‚ÇΩ\n\n"
            f"üë§ Username: @{username}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"confirm_{phone}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"edit_{phone}")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"contact_{phone}")]
        ])
        await bot.send_message(ADMIN_ID, message, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

async def notify_kitchen(order_data, username):
    try:
        message = (
            f"üî• *–ó–∞–∫–∞–∑ –Ω–∞ –∫—É—Ö–Ω—é!*\n\n"
            f"üë§ –ò–º—è: {order_data[0]}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data[1]}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order_data[2]}\n"
            f"üõí –ó–∞–∫–∞–∑: {order_data[3]}\n"
            f"üí∞ –°—É–º–º–∞: {order_data[4]}‚ÇΩ\n\n"
            f"üë§ Username: @{username}"
        )
        await bot.send_message(KITCHEN_ID, message, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ö–Ω–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã! üõµüçî", reply_markup=menu_keyboard)

@dp.message(lambda message: message.text == "üçî –ú–µ–Ω—é")
async def show_menu_categories(message: types.Message, state: FSMContext):
    await state.set_state(None)
    categories = list(menu_items.keys())
    await show_categories_page(message, state, 0)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def show_categories_page(message: types.Message, state: FSMContext, page: int):
    categories = list(menu_items.keys())
    start_index = page * ITEMS_PER_PAGE
    end_index = min((page + 1) * ITEMS_PER_PAGE, len(categories))
    current_categories = categories[start_index:end_index]

    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=category, callback_data=f"category_{category}")]
        for category in current_categories
    ])

    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"categories_page_{page - 1}"))
    if end_index < len(categories):
        navigation_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"categories_page_{page + 1}"))
    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@dp.callback_query(lambda callback: callback.data.startswith("categories_page_"))
async def navigate_categories(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data[16:])
    await show_categories_page(callback.message, state, page)
    await callback.answer()

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda callback: callback.data.startswith("category_"))
async def show_menu_items(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data[9:]
    await state.set_state(None)
    await show_items_page(callback.message, state, category, 0)

async def show_items_page(message: types.Message, state: FSMContext, category: str, page: int):
    items = list(menu_items[category].items())
    start_index = page * ITEMS_PER_PAGE
    end_index = min((page + 1) * ITEMS_PER_PAGE, len(items))
    current_items = items[start_index:end_index]

    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=item, callback_data=f"item_{item}")]
        for item, _ in current_items
    ])

    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"items_page_{category}_{page - 1}"))
    if end_index < len(items):
        navigation_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"items_page_{category}_{page + 1}"))
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(f"*{category}:*", parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.answer(f"*{category}:*", parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(lambda callback: callback.data.startswith("items_page_"))
async def navigate_items(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data[11:].split("_")
    category = data[0]
    page = int(data[-1])
    await show_items_page(callback.message, state, category, page)
    await callback.answer()

@dp.callback_query(lambda callback: callback.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    await show_menu_categories(callback.message, state)
    await callback.answer()

# –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda callback: callback.data.startswith("item_"))
async def show_item_card(callback: types.CallbackQuery):
    item_name = callback.data[5:]
    category = next((cat for cat, items in menu_items.items() if item_name in items), None)
    if not category:
        await callback.answer("–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    item = menu_items[category][item_name]
    caption = (
        f"*{item_name}*\n\n"
        f"üìù {item['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {item['price']}‚ÇΩ"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{item_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"category_{category}")]
    ])

    try:
        await bot.send_photo(
            chat_id=callback.from_user.id,
            photo=FSInputFile(item["photo"]),
            caption=caption,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except FileNotFoundError:
        await callback.answer("–û—à–∏–±–∫–∞: –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(lambda callback: callback.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_name = callback.data[4:]
    category = next((cat for cat, items in menu_items.items() if item_name in items), None)
    if not category:
        await callback.answer("–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if user_id not in user_carts:
        user_carts[user_id] = []
    user_carts[user_id].append(item_name)
    await callback.answer(f"{item_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! ‚úÖ", show_alert=False)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=menu_keyboard)
        return

    cart_summary = "\n".join(cart)
    total_price = calculate_total_price(cart)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ])

    await message.answer(f"üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n{cart_summary}\n\nüí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* {total_price}‚ÇΩ",
                         parse_mode="Markdown", reply_markup=keyboard)

# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(lambda callback: callback.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_carts[user_id] = []
    await callback.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
    await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=menu_keyboard)

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.callback_query(lambda callback: callback.data == "checkout")
async def checkout(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username
    cart = user_carts.get(user_id, [])

    if not cart:
        await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    await state.update_data(cart=cart, total_price=calculate_total_price(cart), username=username)
    await state.set_state(Order.waiting_for_name)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

@dp.message(Order.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Order.waiting_for_phone)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message(Order.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Order.waiting_for_address)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

@dp.message(Order.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(Order.confirm_data)

    user_data = await state.get_data()
    cart_summary = "\n".join(user_data["cart"])
    total_price = user_data["total_price"]

    confirm_message = (
        f"üì¶ *–í–∞—à –∑–∞–∫–∞–∑:*\n\n"
        f"üë§ –§–ò–û: {user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {user_data['address']}\n"
        f"üõí –ó–∞–∫–∞–∑:\n{cart_summary}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total_price}‚ÇΩ\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel_order")]
    ])

    await message.answer(confirm_message, parse_mode="Markdown", reply_markup=keyboard)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
@dp.callback_query(lambda callback: callback.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    order_data = {
        "name": user_data["name"],
        "phone": user_data["phone"],
        "address": user_data["address"],
        "cart": user_data["cart"],
        "total_price": user_data["total_price"],
        "username": user_data.get("username", "")
    }

    orders[user_data["phone"]] = order_data
    save_orders(orders)

    await notify_admin([
        order_data["name"],
        order_data["phone"],
        order_data["address"],
        "\n".join(order_data["cart"]),
        order_data["total_price"]
    ], order_data["phone"], order_data["username"])

    user_id = callback.from_user.id
    user_carts.pop(user_id, [])
    await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. üöÄ", reply_markup=menu_keyboard)
    await state.clear()

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
@dp.callback_query(lambda callback: callback.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_keyboard)

# –°–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º
@dp.callback_query(lambda callback: callback.data.startswith("contact_"))
async def contact_client(callback: types.CallbackQuery):
    phone = callback.data.split("_")[1]
    await callback.answer(f"–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É: {phone}", show_alert=True)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def show_edit_options(message: types.Message, phone: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –§–ò–û", callback_data=f"edit_name_{phone}")],
        [InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data=f"edit_phone_{phone}")],
        [InlineKeyboardButton(text="üè† –ê–¥—Ä–µ—Å", callback_data=f"edit_address_{phone}")],
        [InlineKeyboardButton(text="üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞", callback_data=f"edit_cart_{phone}")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"confirm_edit_{phone}")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)

@dp.callback_query(lambda callback: callback.data.startswith("edit_") and "name" not in callback.data and "phone" not in callback.data and "address" not in callback.data and "cart" not in callback.data and "confirm" not in callback.data)
async def start_edit_order(callback: types.CallbackQuery, state: FSMContext):
    phone = callback.data.split("_")[1]
    await state.update_data(phone=phone)
    await show_edit_options(callback.message, phone)
    await callback.answer()

@dp.callback_query(lambda callback: callback.data.startswith("edit_name_"))
async def edit_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EditOrder.edit_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")

@dp.callback_query(lambda callback: callback.data.startswith("edit_phone_"))
async def edit_phone(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EditOrder.edit_phone)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.callback_query(lambda callback: callback.data.startswith("edit_address_"))
async def edit_address(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EditOrder.edit_address)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")

@dp.callback_query(lambda callback: callback.data.startswith("edit_cart_"))
async def edit_cart(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EditOrder.edit_cart)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")

@dp.message(EditOrder.edit_name)
async def process_edit_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    user_data = await state.get_data()
    await show_edit_options(message, user_data["phone"])

@dp.message(EditOrder.edit_phone)
async def process_edit_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    user_data = await state.get_data()
    await show_edit_options(message, user_data["phone"])

@dp.message(EditOrder.edit_address)
async def process_edit_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    user_data = await state.get_data()
    await show_edit_options(message, user_data["phone"])

@dp.message(EditOrder.edit_cart)
async def process_edit_cart(message: types.Message, state: FSMContext):
    cart = message.text.split("\n")
    await state.update_data(cart=cart)
    user_data = await state.get_data()
    await show_edit_options(message, user_data["phone"])

@dp.callback_query(lambda callback: callback.data.startswith("confirm_edit_"))
async def confirm_edit(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    phone = user_data["phone"]
    order_data = orders.get(phone, {})
    order_data.update({
        "name": user_data.get("name", order_data.get("name", "")),
        "phone": user_data.get("phone", order_data.get("phone", "")),
        "address": user_data.get("address", order_data.get("address", "")),
        "cart": user_data.get("cart", order_data.get("cart", [])),
        "total_price": calculate_total_price(user_data.get("cart", order_data.get("cart", []))),
    })
    orders[phone] = order_data
    save_orders(orders)
    await notify_admin([
        order_data["name"],
        order_data["phone"],
        order_data["address"],
        "\n".join(order_data["cart"]),
        order_data["total_price"]
    ], order_data["phone"], order_data.get("username", ""))
    await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!", reply_markup=menu_keyboard)
    await state.clear()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@dp.callback_query(lambda callback: callback.data.startswith("confirm_"))
async def admin_confirm_order(callback: types.CallbackQuery):
    phone = callback.data.split("_")[1]

    if phone in orders:
        order_data = orders[phone]
        username = order_data.get("username", "")

        await notify_kitchen([
            order_data["name"],
            order_data["phone"],
            order_data["address"],
            "\n".join(order_data["cart"]),
            order_data["total_price"]
        ], username)

        await update_or_add_order_to_sheet([
            order_data["name"],
            order_data["phone"],
            order_data["address"],
            "\n".join(order_data["cart"]),
            str(order_data["total_price"])
        ])

        del orders[phone]
        save_orders(orders)

        await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫—É—Ö–Ω—é!", show_alert=True)
    else:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer("üìû –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: +7 999 123 45 67\nüåç –ù–∞—à —Å–∞–π—Ç: https://example.com", reply_markup=menu_keyboard)

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: types.Message):
    await message.answer("üçî –ú—ã ‚Äî –ª—É—á—à–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ! üöÄ\n–ì–æ—Ç–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –∏–∑ —Å–≤–µ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!",
                         reply_markup=menu_keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())